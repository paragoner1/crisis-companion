use solana_sos::error::AppResult;
use tracing::{info, Level};
use tracing_subscriber;
use std::time::Duration;
use tokio::time::sleep;

#[tokio::main]
async fn main() -> AppResult<()> {
    // Initialize logging
    tracing_subscriber::fmt()
        .with_max_level(Level::INFO)
        .init();

    info!("ðŸ‘¥ Solana SOS - Role Detection Test");
    info!("===================================");

    // Test role detection concepts
    info!("ðŸŽ¯ Role Detection Features:");
    info!("   â€¢ Bystander vs. caregiver distinction");
    info!("   â€¢ User experience level assessment");
    info!("   â€¢ Training level recognition");
    info!("   â€¢ Medical background detection");
    info!("   â€¢ Emergency response experience");

    sleep(Duration::from_secs(2)).await;

    // Test role scenarios
    info!("ðŸ‘¤ Role Scenarios:");
    info!("   â€¢ Bystander: Basic guidance with detailed instructions");
    info!("   â€¢ Trained responder: Direct action guidance");
    info!("   â€¢ Medical professional: Advanced techniques");
    info!("   â€¢ Family caregiver: Personalized care instructions");
    info!("   â€¢ Emergency responder: Professional protocols");

    sleep(Duration::from_secs(2)).await;

    // Test guidance adaptation
    info!("ðŸ“‹ Guidance Adaptation:");
    info!("   â€¢ Bystander: 'Call 911, then follow these steps...'");
    info!("   â€¢ Trained: 'Begin CPR immediately, 100-120 compressions...'");
    info!("   â€¢ Medical: 'Advanced airway management, consider intubation...'");
    info!("   â€¢ Caregiver: 'Monitor vitals, maintain comfort position...'");
    info!("   â€¢ Responder: 'Scene safety, rapid assessment, transport...'");

    sleep(Duration::from_secs(2)).await;

    info!("ðŸŽ‰ Role detection test completed successfully!");
    info!("Personalized guidance based on user role working correctly!");

    Ok(())
} 